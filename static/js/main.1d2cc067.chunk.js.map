{"version":3,"sources":["components/data/animals.js","components/Question.js","components/Options.js","components/Top.js","components/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["animals","id","question","options","correctAnswer","Question","questions","className","Options","answer","map","index","key","onClick","Top","currentQuestion","score","Quiz","state","userAnswer","time","quizEnd","loadQuiz","setState","length","this","prevProps","prevState","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1d2cc067.chunk.js","sourcesContent":["export const animals = [\r\n  {\r\n    id: 1,\r\n    question: 'Which animal have the biggest eyes of any living creature ?',\r\n    options: ['Unicorn', 'Horse', 'Earwigs', 'Owl'],\r\n    correctAnswer: 'Horse',\r\n  },\r\n  {\r\n    id: 2,\r\n    question: 'What big cat is also known as the panther ?',\r\n    options: ['Turttle', 'Cat', 'Leopard', 'Lion'],\r\n    correctAnswer: 'Leopard',\r\n  },\r\n  {\r\n    id: 3,\r\n    question: 'What food makes up nearly all of a Giant Pandaâ€™s diet ?',\r\n    options: ['Bamboo', 'Peanuts', 'Rose', 'Grass'],\r\n    correctAnswer: 'Bamboo',\r\n  },\r\n  {\r\n    id: 4,\r\n    question: 'What animal does not drink water ?',\r\n    options: ['A goat rat', 'A kangaroo rat', 'A owl rat', 'A dragon rat'],\r\n    correctAnswer: 'A kangaroo rat',\r\n  },\r\n  {\r\n    id: 5,\r\n    question: ' What kind of animal is a komodo dragon ?',\r\n    options: ['Lizard', 'Bat', 'Liger', 'Sheep'],\r\n    correctAnswer: 'Lizard',\r\n  },\r\n  {\r\n    id: 6,\r\n    question: 'Which bird has the largest wingspan of any living bird ?',\r\n    options: [\r\n      'The flying albatross',\r\n      'The wandering albatross',\r\n      'The small albatross',\r\n      'The big albatross',\r\n    ],\r\n    correctAnswer: 'The wandering albatross',\r\n  },\r\n  {\r\n    id: 7,\r\n    question: 'What is a male swan called ?',\r\n    options: ['cob', 'kangaroo', 'proboscis', 'butterfly'],\r\n    correctAnswer: 'cob',\r\n  },\r\n  {\r\n    id: 8,\r\n    question: 'What type of animal is a basenji ?',\r\n    options: ['Sheep', 'The hippopotamus', 'Hunting dog', 'The ostrich'],\r\n    correctAnswer: 'Hunting dog',\r\n  },\r\n  {\r\n    id: 9,\r\n    question: 'What do you call a group of Kangeroos ?',\r\n    options: ['Pack', 'Troop', 'Army', 'Group'],\r\n    correctAnswer: 'Troop',\r\n  },\r\n  {\r\n    id: 10,\r\n    question: 'What Animal Is A Skua ?',\r\n    options: ['Cat', 'Bird', 'Mouse', 'Dog'],\r\n    correctAnswer: 'Bird',\r\n  },\r\n];\r\n","import React from 'react'\n\nexport default function Question({questions}) {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-sm-12\">\n          <h5 className=\"question text-center\">{questions}</h5>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function Options({options, answer}) {\n  return (\n    <div className=\"container\">\n        {options.map((index, id) => {\n          return (\n            <div className=\"row\" key={id}>\n              <div className=\"col-sm-12 my-2\">\n                <button \n                  onClick={() => answer(index)} \n                  className=\"button\">\n                  {index}\n                </button>\n              </div>\n            </div>\n          )\n        })}\n    </div>\n  )\n}","import React from 'react'\n\nexport default function Top({currentQuestion, score, animals}) {\n  // const [counter, setCounter] = React.useState(10);\n\n  // React.useEffect(() => {\n  //   counter > 0 && setTimeout(() => setCounter(counter - 1), 1000)\n  // }, [counter]);\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col my-3\">\n          <p>Questions: {currentQuestion + 1} / {animals}</p>\n        </div>\n        <div className=\"col my-3\" >\n          <p>Score: {score}</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { Component } from 'react';\nimport {animals} from './data/animals'\nimport Question from './Question';\nimport Options from './Options';\nimport Top from './Top';\n\nclass Quiz extends Component {\n  state = {\n    userAnswer: null,\n    currentQuestion: 0,\n    options: [],\n    score: 0,\n    time: 10,\n    quizEnd: false,\n  }\n\n  loadQuiz = () => {\n    const {currentQuestion} = this.state;\n    this.setState({\n      questions: animals[currentQuestion].question,\n      options: animals[currentQuestion].options,\n      correctAnswer: animals[currentQuestion].correctAnswer,\n    });\n  }\n\n  componentDidMount() {\n    this.loadQuiz();\n  }\n\n  answer = (options) => {\n    const {score} = this.state;\n    if (this.state.correctAnswer === options) {\n      this.setState({\n        currentQuestion: this.state.currentQuestion + 1,\n        score: score + 10,\n      })\n    } else {\n      this.setState({\n        currentQuestion: this.state.currentQuestion + 1,\n        score: score + 0\n      })\n    }\n    if (this.state.currentQuestion === animals.length - 1) {\n      this.setState({\n        currentQuestion: this.state.currentQuestion - 1,\n        quizEnd: true,\n      })\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {currentQuestion} = this.state;\n    if(this.state.currentQuestion !== prevState.currentQuestion) {\n      this.setState(() => {\n        return {\n          questions: animals[currentQuestion].question,\n          options: animals[currentQuestion].options,\n          correctAnswer: animals[currentQuestion].correctAnswer,\n        }\n      })\n    } \n    \n  }\n  render() {\n    const {questions, options, score, currentQuestion, quizEnd} = this.state;\n    \n    if(quizEnd) {\n      return (\n        <div className=\"container box\">\n          <div className=\"row \">\n            <div className=\"col text-center\">\n              <h1>Quiz is Finish</h1>\n              <p>Your score is 100 / {score}</p>\n            </div>\n          </div>\n        </div>\n      )\n    }\n    \n    return (\n      <div className=\"container text-center\">\n        <Top score={score} currentQuestion={currentQuestion} animals={animals.length} />\n        <Question questions={questions} />\n        <Options answer={this.answer} options={options} />\n      </div>\n    );\n  }\n}\n\nexport default Quiz;\n","import React from 'react';\nimport './App.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n// import 'semantic-ui-react'\nimport Quiz from './components/Quiz';\n\nfunction App() {\n  return (\n    <div className=\"homePage\">\n      <Quiz />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}